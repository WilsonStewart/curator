/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RepositoriesImport } from './routes/repositories'
import { Route as PoliciesImport } from './routes/policies'
import { Route as ExhibitsImport } from './routes/exhibits'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AutomationsImport } from './routes/automations'
import { Route as ArtifactsImport } from './routes/artifacts'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsStatusImport } from './routes/settings.status'

// Create/Update Routes

const RepositoriesRoute = RepositoriesImport.update({
  id: '/repositories',
  path: '/repositories',
  getParentRoute: () => rootRoute,
} as any)

const PoliciesRoute = PoliciesImport.update({
  id: '/policies',
  path: '/policies',
  getParentRoute: () => rootRoute,
} as any)

const ExhibitsRoute = ExhibitsImport.update({
  id: '/exhibits',
  path: '/exhibits',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AutomationsRoute = AutomationsImport.update({
  id: '/automations',
  path: '/automations',
  getParentRoute: () => rootRoute,
} as any)

const ArtifactsRoute = ArtifactsImport.update({
  id: '/artifacts',
  path: '/artifacts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsStatusRoute = SettingsStatusImport.update({
  id: '/settings/status',
  path: '/settings/status',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/artifacts': {
      id: '/artifacts'
      path: '/artifacts'
      fullPath: '/artifacts'
      preLoaderRoute: typeof ArtifactsImport
      parentRoute: typeof rootRoute
    }
    '/automations': {
      id: '/automations'
      path: '/automations'
      fullPath: '/automations'
      preLoaderRoute: typeof AutomationsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/exhibits': {
      id: '/exhibits'
      path: '/exhibits'
      fullPath: '/exhibits'
      preLoaderRoute: typeof ExhibitsImport
      parentRoute: typeof rootRoute
    }
    '/policies': {
      id: '/policies'
      path: '/policies'
      fullPath: '/policies'
      preLoaderRoute: typeof PoliciesImport
      parentRoute: typeof rootRoute
    }
    '/repositories': {
      id: '/repositories'
      path: '/repositories'
      fullPath: '/repositories'
      preLoaderRoute: typeof RepositoriesImport
      parentRoute: typeof rootRoute
    }
    '/settings/status': {
      id: '/settings/status'
      path: '/settings/status'
      fullPath: '/settings/status'
      preLoaderRoute: typeof SettingsStatusImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/artifacts': typeof ArtifactsRoute
  '/automations': typeof AutomationsRoute
  '/dashboard': typeof DashboardRoute
  '/exhibits': typeof ExhibitsRoute
  '/policies': typeof PoliciesRoute
  '/repositories': typeof RepositoriesRoute
  '/settings/status': typeof SettingsStatusRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/artifacts': typeof ArtifactsRoute
  '/automations': typeof AutomationsRoute
  '/dashboard': typeof DashboardRoute
  '/exhibits': typeof ExhibitsRoute
  '/policies': typeof PoliciesRoute
  '/repositories': typeof RepositoriesRoute
  '/settings/status': typeof SettingsStatusRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/artifacts': typeof ArtifactsRoute
  '/automations': typeof AutomationsRoute
  '/dashboard': typeof DashboardRoute
  '/exhibits': typeof ExhibitsRoute
  '/policies': typeof PoliciesRoute
  '/repositories': typeof RepositoriesRoute
  '/settings/status': typeof SettingsStatusRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/artifacts'
    | '/automations'
    | '/dashboard'
    | '/exhibits'
    | '/policies'
    | '/repositories'
    | '/settings/status'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/artifacts'
    | '/automations'
    | '/dashboard'
    | '/exhibits'
    | '/policies'
    | '/repositories'
    | '/settings/status'
  id:
    | '__root__'
    | '/'
    | '/artifacts'
    | '/automations'
    | '/dashboard'
    | '/exhibits'
    | '/policies'
    | '/repositories'
    | '/settings/status'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArtifactsRoute: typeof ArtifactsRoute
  AutomationsRoute: typeof AutomationsRoute
  DashboardRoute: typeof DashboardRoute
  ExhibitsRoute: typeof ExhibitsRoute
  PoliciesRoute: typeof PoliciesRoute
  RepositoriesRoute: typeof RepositoriesRoute
  SettingsStatusRoute: typeof SettingsStatusRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArtifactsRoute: ArtifactsRoute,
  AutomationsRoute: AutomationsRoute,
  DashboardRoute: DashboardRoute,
  ExhibitsRoute: ExhibitsRoute,
  PoliciesRoute: PoliciesRoute,
  RepositoriesRoute: RepositoriesRoute,
  SettingsStatusRoute: SettingsStatusRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/artifacts",
        "/automations",
        "/dashboard",
        "/exhibits",
        "/policies",
        "/repositories",
        "/settings/status"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/artifacts": {
      "filePath": "artifacts.tsx"
    },
    "/automations": {
      "filePath": "automations.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/exhibits": {
      "filePath": "exhibits.tsx"
    },
    "/policies": {
      "filePath": "policies.tsx"
    },
    "/repositories": {
      "filePath": "repositories.tsx"
    },
    "/settings/status": {
      "filePath": "settings.status.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
